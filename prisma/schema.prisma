generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * === Enums ===
 */
enum Plan {
  FREE
  PRO
  BUSINESS
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  INCOMPLETE
}

enum Role {
  USER
  STORE_OWNER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
  SHIPPED
  COMPLETED
}

enum MessageType {
  TEXT
  IMAGE
  SYSTEM
}

/**
 * === Modelos ===
 */
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  // tiendas del usuario
  stores Store[]

  // suscripción actual (1-1)
  subscription Subscription?

  // pedidos del usuario
  Order Order[]

  // mensajes enviados por el usuario
  messages Message[]

  // participación en conversaciones (tabla puente)
  conversationParticipants ConversationParticipant[]
   // 🔔 notificaciones recibidas
  notifications Notification[]
}

model PlanLimit {
  id                  Int  @id @default(autoincrement())
  plan                Plan @unique
  maxStores           Int?
  maxProductsPerStore Int?
}

model Subscription {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  plan   Plan               @default(FREE)
  status SubscriptionStatus @default(ACTIVE)

  currentPeriodStart DateTime  @default(now())
  currentPeriodEnd   DateTime?
  cancelAt           DateTime?
  canceledAt         DateTime?

  // IDs externos (opcionales)
  externalCustomerId     String? @db.VarChar(191)
  externalSubscriptionId String? @db.VarChar(191)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id       Int       @id @default(autoincrement())
  name     String
  ownerId  Int
  owner    User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // pedidos de la tienda
  Order Order[]

  // conversaciones relacionadas con la tienda
  conversations Conversation[]

  @@unique([ownerId, name])
  @@index([ownerId])
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)

  storeId Int
  store   Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // items en pedidos
  OrderItem OrderItem[]

  // conversaciones sobre este producto (relación nombrada)
  conversations Conversation[] @relation("ProductConversations")

  @@unique([storeId, name])
  @@index([storeId])
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  storeId   Int
  total     Float       @default(0)
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relaciones
  user  User        @relation(fields: [userId], references: [id])
  store Store       @relation(fields: [storeId], references: [id])
  items OrderItem[]

  // conversaciones ligadas a este pedido (opcional)
  conversations Conversation[]

  @@map("orders")
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int   @default(1)
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

/**
 * === Chat estilo Wallapop ===
 * Conversación por producto/tienda/pedido entre usuarios.
 */
model Conversation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // contexto opcional
  storeId   Int?
  orderId   Int?
  productId Int?

  store   Store?   @relation(fields: [storeId], references: [id], onDelete: SetNull)
  order   Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  product Product? @relation("ProductConversations", fields: [productId], references: [id], onDelete: SetNull)

  participants ConversationParticipant[]
  messages     Message[]                 @relation("ConversationMessages")

  // último mensaje
  lastMessageAt DateTime? @db.Timestamp(6)
  lastMessageId Int?      @unique
  lastMessage   Message?  @relation("LastMessage", fields: [lastMessageId], references: [id])

  @@index([storeId])
  @@index([orderId])
  @@index([productId])
  @@index([lastMessageAt])
}

model Message {
  id             Int         @id @default(autoincrement())
  conversationId Int
  senderId       Int
  type           MessageType @default(TEXT)
  content        String?
  createdAt      DateTime    @default(now())

  // relación principal con la conversación (lista de mensajes)
  conversation Conversation @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)

  // inverso de Conversation.lastMessage
  lastMessageOf Conversation? @relation("LastMessage")

  // usuario que envía
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)

  attachments MessageAttachment[]

  @@index([conversationId, createdAt])
  @@index([senderId])
}

model ConversationParticipant {
  conversationId Int
  userId         Int
  role           String? // "BUYER" | "SELLER" (orientativo)
  joinedAt       DateTime  @default(now())
  lastReadAt     DateTime?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([conversationId, userId])
  @@index([userId])
}

model MessageAttachment {
  id        Int    @id @default(autoincrement())
  messageId Int
  url       String // ubicación del archivo (S3/R2/local)
  mimeType  String
  sizeBytes Int
  width     Int?
  height    Int?

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String   // "NEW_MESSAGE" | "ORDER_UPDATE" | etc.
  title     String
  body      String?
  data      Json?    // información adicional (ej: { "conversationId": 1 })
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
}
